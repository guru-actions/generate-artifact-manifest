apiVersion: automation.cloudbees.io/v1alpha1
kind: action
name: generate-artifact-manifest
description: Generates a YAML manifest of latest artifacts for a list of components.

inputs:
  cb_api_url:
    required: true
  cb_pat:
    required: true
  component_ids:
    required: true
    description: Comma-separated list of component IDs (e.g. id1,id2)
  labels:
    required: true
    description: Label filters to apply (e.g. rel=squid-ui,ns=squid-prod)

outputs:
  manifest:
    description: YAML-formatted artifact manifest with IDs, versions, timestamps, and names
    value: ${{ steps.generate.outputs.manifest }}
  errors:
    description: JSON-formatted list of components that failed to fetch
    value: ${{ steps.generate.outputs.errors }}

runs:
  using: composite
  steps:
    - id: generate
      name: Generate artifact manifest
      uses: docker://python:3.11-alpine
      shell: sh
      env:
        CB_API_URL: ${{ inputs.cb_api_url }}
        CB_PAT: ${{ inputs.cb_pat }}
        COMPONENT_IDS: ${{ inputs.component_ids }}
        LABELS: ${{ inputs.labels }}
      run: |
        apk add --no-cache curl jq yq > /dev/null

        echo "🔍 Fetching latest artifacts for: $COMPONENT_IDS"
        echo "" > manifest.yaml
        echo '{"errors":[]}' > errors.json
        echo "🔍 Created blank manifest and error file"

        for COMPONENT_ID in $(echo "$COMPONENT_IDS" | tr ',' ' '); do
          echo "📦 Fetching for component: $COMPONENT_ID"
          STATUS=$(curl -s -w "%{http_code}" -o response.json \
            -H "Authorization: Bearer $CB_PAT" \
            "$CB_API_URL/v3/components/$COMPONENT_ID/artifactinfos")

          if [ "$STATUS" -ne 200 ]; then
            echo "❌ Component fetch failed for $COMPONENT_ID (HTTP $STATUS)"
            jq --arg id "$COMPONENT_ID" --arg status "$STATUS" \
              '.errors += [{"component_id": $id, "status": ($status | tonumber), "message": "Component fetch failed"}]' \
              errors.json > tmp.json && mv tmp.json errors.json
            continue
          fi

          FILTER=$(echo "$LABELS" | awk -F, '
            {
              for (i = 1; i <= NF; i++) {
                split($i, kv, "=")
                printf "(.labels | index(\"%s=%s\")) and ", kv[1], kv[2]
              }
            }' | sed 's/ and $//')

          MATCH=$(jq -r ".artifacts[] | select($FILTER) | \"\(.id) \(.version) \(.publishedOn) \(.name)\"" response.json | head -n 1)

          if [ -z "$MATCH" ]; then
            echo "⚠️  No matching artifact found for $COMPONENT_ID (valid component)"
            echo "$COMPONENT_ID:" >> manifest.yaml
            echo "  artifact_id: null" >> manifest.yaml
            echo "  version: null" >> manifest.yaml
            echo "  timestamp: null" >> manifest.yaml
            echo "  artifact_name: null" >> manifest.yaml
            continue
          fi

          ARTIFACT_ID=$(echo "$MATCH" | awk '{print $1}')
          VERSION=$(echo "$MATCH" | awk '{print $2}')
          TIMESTAMP=$(echo "$MATCH" | awk '{print $3}')
          ARTIFACT_NAME=$(echo "$MATCH" | cut -d' ' -f4-)

          echo "$COMPONENT_ID:" >> manifest.yaml
          echo "  artifact_id: \"$ARTIFACT_ID\"" >> manifest.yaml
          echo "  version: \"$VERSION\"" >> manifest.yaml
          echo "  timestamp: \"$TIMESTAMP\"" >> manifest.yaml
          echo "  artifact_name: \"$ARTIFACT_NAME\"" >> manifest.yaml
        done

        echo "✅ Final Manifest:"
        cat manifest.yaml
        echo "📋 Final Errors:"
        cat errors.json

        # Write outputs
        cat manifest.yaml > "$CLOUDBEES_OUTPUTS/manifest"
        cat errors.json > "$CLOUDBEES_OUTPUTS/errors"
